from .. import inference as ifr
from .. import distributions as dst
from .. import output as op
from .. import tests as tst
from .. import tsm as tsm
from .. import gas as gas
import numpy as np
import pandas as pd
import scipy.stats as ss
from math import exp, sqrt, log, tanh
import copy
from scipy import optimize
import matplotlib.pyplot as plt
import seaborn as sns
from .. import covariances as cov
import numdifftools as nd

class EGARCH(tsm.TSM):

	def __init__(self,data,p,q,target=None):

		# Initialize TSM object
		tsm.TSM.__init__(self,'GARCH')

		# Parameters
		self.p = p
		self.q = q
		self.param_no = self.p + self.q + 1

		# Check Data format
		if isinstance(data, pd.DataFrame):
			self.index = data.index			
			if target is None:
				self.data = data.ix[:,0].values
				self.data_name = data.columns.values[0]
			else:
				self.data = data[target]
				self.data_name = target					
			self.data_type = 'pandas'
			print str(self.data_name) + " picked as target variable"
			print ""

		elif isinstance(data, np.ndarray):
			self.data_name = "Series"		
			self.data_type = 'numpy'	
			if any(isinstance(i, np.ndarray) for i in data):
				if target is None:
					self.data = data[0]
					self.index = range(len(data[0]))
				else:
					self.data = data[target]
					self.index = range(len(data[target]))
				print "Nested list " + str(target) + " chosen as target variable"
				print ""
			else:
				self.data = data
				self.index = range(len(data))

		else:
			raise Exception("The data input is not pandas or numpy compatible!")	

		self.param_desc.append({'name' : 'Constant', 'index': 0, 'prior': ifr.Normal(0,3,transform='exp'), 'q': dst.Normal(0,3)})		
		
		# AR terms
		for j in range(1,self.q+1):
			self.param_desc.append({'name' : 'q(' + str(j) + ')', 'index': j, 'prior': ifr.Normal(0,0.5,transform='exp'), 'q': dst.Normal(0,3)})
		
		# Score terms
		for k in range(self.q+1,self.p+self.q+1):
			self.param_desc.append({'name' : 'p(' + str(k-self.q) + ')', 'index': k, 'prior': ifr.Normal(0,0.5,transform='exp'), 'q': dst.Normal(0,3)})

		# Other attributes

		self.hess_type = 'numerical'
		self.param_hide = 0 # Whether to cutoff variance parameters from results
		self.supported_methods = ["MLE","MAP","Laplace","M-H","BBVI"]
		self.default_method = "MLE"

	# Holds the core model matrices
	def model(self,beta,x):
		Y = np.array(x[max(self.p,self.q):len(x)])
		X = np.ones(len(Y))
		lmda = np.ones(len(Y))*parm[0]
 		scores = np.zeros(len(Y))

		# Transform parameters
		parm = [self.param_desc[k]['prior'].transform(beta[k]) for k in range(len(beta))]

		# Loop over time series
		for t in range(max(self.p,self.q),len(Y)):

			# Loop over AR terms
			for p_term in range(self.q):
				lmda[t] += parm[1+p_term]*lmda[t-p_term-1]

			# Loop over Score terms
			for q_term in range(self.p):
				lmda[t] += parm[1+self.q+q_term]*scores[t-q_term-1]

			scores[t] = gas.lik_score(Y[t],lmda[t],parm[len(parm)-1],'Beta-t')

		return lmda, Y

	# Returns negative log likelihood
	def likelihood(self,beta):
		lmda, Y = self.model(beta,self.data)
		return -np.sum(ss.t.logpdf(Y,loc=np.zeros(len(lmda)),scale=np.exp(lmda/2)))
		